package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple tup1State = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        int fieldIndex = p.getField1();
        return child1.getTupleDesc().getFieldName(fieldIndex);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        int fieldIndex = p.getField2();
        return child1.getTupleDesc().getFieldName(fieldIndex);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (tup1State == null){
        	if (child1.hasNext()){
        		tup1State = child1.next();
        	}
        	else{
        		return null;
        	}
        }
    	while (child2.hasNext()){
    		Tuple tup2 = child2.next();
    		if (p.filter(tup1State, tup2)){
    			return mergeTuples(tup1State, tup2);
    		}
    	}
    	child2.rewind();  
    	tup1State = null;
    	return fetchNext();
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (children.length != 2){
        	throw new IllegalArgumentException("Join must have exactly two children.");
        }
        child1 = children[0];
        child2 = children[1];
    }
    
    /**
     * Helper function to merge tuples
     * @return
     */
    private Tuple mergeTuples(Tuple t1, Tuple t2){
    	TupleDesc mergedTD = getTupleDesc();
    	int numFields1 = t1.getTupleDesc().numFields();
    	int numFields2 = t2.getTupleDesc().numFields();
    	Tuple mergedTuple = new Tuple(mergedTD);
    	for (int i=0; i < numFields1; i++){
    		mergedTuple.setField(i, t1.getField(i));
    	}
    	for (int j=0; j < numFields2; j++){
    		mergedTuple.setField(j + numFields1, t2.getField(j));
    	}
    	return mergedTuple;
    }

}
